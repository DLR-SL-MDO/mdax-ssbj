{"identifier": "0e421dfb-6da1-48be-bbba-45a4c518e5c9", "workflowVersion": "5.0", "name": "SSBJ - MDA", "nodes": [{"identifier": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "name": "MDA", "location": "270:270", "zIndex": "1", "active": "true", "component": {"identifier": "de.rcenvironment.converger", "version": "6", "name": "Converger"}, "configuration": {"epsA": "1e-02", "epsR": "1e-02", "failLoopOnly-NAV_5e0ed1cd": "true", "isNestedLoop_5e0ed1cd": "false", "iterationsToConsider": "1", "maxConvChecks": "100", "maxRerunBeforeFail-NAV_5e0ed1cd": "1", "notConvFail": "false", "notConvIgnore": "true", "notConvNotAValue": "false", "storeComponentHistoryData": "true"}, "staticOutputs": [{"identifier": "5e3d58e7-befd-44fa-a2e2-ba691c748f08", "name": "Converged", "datatype": "Boolean"}, {"identifier": "89546bf0-bb83-4758-a021-bb4704726d38", "name": "Converged absolute", "datatype": "Boolean"}, {"identifier": "03d72eb7-2db4-47d6-a062-819d2a83a26a", "name": "Converged relative", "datatype": "Boolean"}, {"identifier": "c671ece1-e745-4a45-ba64-a3627d830591", "name": "Done", "datatype": "Boolean"}], "dynamicInputs": [{"identifier": "232f70f8-7357-45f0-9ec5-c35d5a4ee521", "name": "/dataSchema/aircraft/other/fin", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "9c8e6a13-6f1f-4109-9d0d-1750a027da14", "name": "/dataSchema/aircraft/other/fin_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "6fecbf71-07a3-455e-8570-bffe46171117", "name": "/dataSchema/aircraft/weight/WT", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "c68e21d2-d440-47ff-8861-9e5990573108", "name": "/dataSchema/aircraft/weight/WT_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "236bd2c6-de37-4482-99e2-1b9f2e2b5700", "name": "/dataSchema/aircraft/other/D", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "40171280-3cf0-4cb0-9ec8-b8ee14cfa411", "name": "/dataSchema/aircraft/other/D_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "74e15782-f749-4fbd-8a2a-90a34e51ce03", "name": "/dataSchema/aircraft/other/L", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "7a66b1d3-0b71-4469-a92e-fd14f50aeac0", "name": "/dataSchema/aircraft/other/L_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "d5392e64-06e7-47a9-a492-68df01080dc8", "name": "/dataSchema/aircraft/weight/WF", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "882e8192-4c2e-4410-9426-e6a30139438d", "name": "/dataSchema/aircraft/weight/WF_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "716fe28a-e8d1-4431-898e-bb25f7699217", "name": "/dataSchema/reference/ESF", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "0d8771ba-0434-43d4-893d-7c1d821c3cb3", "name": "/dataSchema/reference/ESF_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "9d67dfea-df0f-46ad-8262-4b930f244d95", "name": "/dataSchema/aircraft/geometry/Theta", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "f59ffe2e-d115-4446-b934-21a1d9337658", "name": "/dataSchema/aircraft/geometry/Theta_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "ba76fc48-7cf6-4543-a961-53488219be44", "name": "/dataSchema/aircraft/weight/WE", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "030e5c1f-e15a-4c1d-862c-d4f0d592a012", "name": "/dataSchema/aircraft/weight/WE_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "a7565a3f-ebc7-4fe2-a900-5d4119670c2f", "name": "/dataSchema/aircraft/other/SFC", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "a70627a4-47ba-4a4e-8d29-2e2dc7d8824b", "name": "/dataSchema/aircraft/other/SFC_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "79156375-ddfc-42be-a447-480ae467761d", "name": "XML", "epIdentifier": "toForward", "group": "valuesToConverge", "datatype": "FileReference"}, {"identifier": "68592b43-3432-48ce-8533-11cf805fca8d", "name": "XML_start", "epIdentifier": "startToForward", "group": "startValues", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "57b35b61-bd98-480d-958f-5dfd80d786e4", "name": "/dataSchema/aircraft/other/fin", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "7cdc8ec2-acd6-4954-b51a-232755aa0fcb", "name": "/dataSchema/aircraft/other/fin_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "2b1a62ac-2435-4711-ad7e-4dd4eb5fe544", "name": "/dataSchema/aircraft/other/fin_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "2320f61e-4787-4a8a-a0d0-affc4d6415aa", "name": "/dataSchema/aircraft/weight/WT", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "3ae5aa1e-be53-4d29-bc8f-95857d52b53e", "name": "/dataSchema/aircraft/weight/WT_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "18c60ad3-8476-46bc-b034-820d84587e91", "name": "/dataSchema/aircraft/weight/WT_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "120caa51-bce7-4cb6-add7-1ddad11b52ff", "name": "/dataSchema/aircraft/other/D", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "4e57f5b2-b72f-4e9a-a716-206d162140a5", "name": "/dataSchema/aircraft/other/D_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "903610c4-07a1-4cb9-bcf1-c525e4739d6f", "name": "/dataSchema/aircraft/other/D_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "4e44a4f9-d180-4aaa-a8ba-d47dd679cbca", "name": "/dataSchema/aircraft/other/L", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "98bc261c-fac0-45ec-802f-bf6b8323c7c1", "name": "/dataSchema/aircraft/other/L_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "cb3b4d05-52d3-48c3-a9bc-76511fb9747b", "name": "/dataSchema/aircraft/other/L_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "6475a5fd-7f95-4cfa-a639-140d65cbf9e5", "name": "/dataSchema/aircraft/weight/WF", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "dddfd12d-314b-4654-add1-073fa5bd0773", "name": "/dataSchema/aircraft/weight/WF_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "c4d5b820-2d48-4de0-9ee9-bea06112c34a", "name": "/dataSchema/aircraft/weight/WF_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "ef3a6b85-0c29-4707-96ad-9a48f0235a0d", "name": "/dataSchema/reference/ESF", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "31bea3e4-5aec-41e1-8604-ac70ad74b5e8", "name": "/dataSchema/reference/ESF_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "f22e7235-1d35-4b43-9032-d2f9c3232ebe", "name": "/dataSchema/reference/ESF_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "3e299c80-8260-4b74-9a2a-5939a674c076", "name": "/dataSchema/aircraft/geometry/Theta", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "fec3e0cc-1ca7-47c7-beb2-5f610ee1133d", "name": "/dataSchema/aircraft/geometry/Theta_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "cfcbef69-21c0-4a5e-ba9f-73a06eb9e129", "name": "/dataSchema/aircraft/geometry/Theta_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "7d4ff0af-8cf8-4e35-9c11-1b2ce9f12e92", "name": "/dataSchema/aircraft/weight/WE", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "42b712f4-c404-4c1d-9032-501597feba65", "name": "/dataSchema/aircraft/weight/WE_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "eabaeef5-f71d-4975-9ee5-45ac5288c0ee", "name": "/dataSchema/aircraft/weight/WE_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "9e1310c7-eef3-4941-8918-ab554e20f9e2", "name": "/dataSchema/aircraft/other/SFC", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "aeaee0ea-3ae7-4301-b9b3-fe2d16e22427", "name": "/dataSchema/aircraft/other/SFC_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "cbaad083-3430-46ef-8704-e2d3d20d1f33", "name": "/dataSchema/aircraft/other/SFC_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "5edfc257-9ea6-4692-a15c-db46dad3673f", "name": "XML", "epIdentifier": "toForward", "datatype": "FileReference"}, {"identifier": "772dd7bb-ec09-4573-b137-6595eaee1067", "name": "XML_converged", "epIdentifier": "finalToForward", "datatype": "FileReference"}]}, {"identifier": "c15df9cd-9f39-4dbf-b7a1-596bdd858a69", "name": "SSBJ-Aerodynamics", "location": "490:490", "zIndex": "2", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.SSBJ-Aerodynamics", "version": "1.0", "name": "SSBJ-Aerodynamics"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "24b08083-54e2-4a48-bea2-48beead75d6d", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "f05d616d-f2ee-47dc-93c0-573a56276304", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "65c5efbc-c9e5-4e72-8f4d-953a75cb2338", "name": "SSBJ-Structures", "location": "790:770", "zIndex": "3", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.SSBJ-Structures", "version": "1.0", "name": "SSBJ-Structures"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "0bb5d261-dbd0-45ea-9a4f-f90df39e51bd", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "222e1b8d-1331-4f24-a7f4-966f4fe6e0f2", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "f3e48633-2c2e-442f-bc0a-0e3a1d9e364b", "name": "SSBJ-Performance", "location": "1090:1050", "zIndex": "4", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.SSBJ-Performance", "version": "1.0", "name": "SSBJ-Performance"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "1148c87d-e21d-439d-94a2-bc01766ae1da", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "dd0cb0cd-b7f6-4ee7-9315-088c19342edf", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "b4567702-98c3-49b7-ab3c-b0727fecc9b7", "name": "SSBJ-Propulsion", "location": "1390:1330", "zIndex": "5", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.SSBJ-Propulsion", "version": "1.0", "name": "SSBJ-Propulsion"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "6ec3e747-d47f-4c43-9674-291bc08169f8", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "59cef76a-0462-4287-b916-b6a47d502354", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "c8127432-139b-4cbb-b2e3-d3eb797b9419", "name": "SSBJ-Constraints", "location": "1690:1610", "zIndex": "6", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.SSBJ-Constraints", "version": "1.0", "name": "SSBJ-Constraints"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "7e6c1950-5aaa-43a7-8bd9-4dd51a1ff467", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "50b99380-07e1-4fb0-88c0-a50d63aca359", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "6caad399-b4a3-4bcd-afac-4f26662720ae", "name": "SSBJ-Objective", "location": "1990:1890", "zIndex": "7", "active": "true", "component": {"identifier": "de.rcenvironment.integration.cpacs.SSBJ-Objective", "version": "1.0", "name": "SSBJ-Objective"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "d275d91f-0ca9-45a4-b032-673a1e3b57e6", "name": "CPACS initial", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "cbc2b3e8-6f45-4497-9b94-578e3230d1af", "name": "CPACS out", "datatype": "FileReference"}]}, {"identifier": "e0e211f3-03e9-4920-a94b-ac0775284387", "name": "MDA_input_values", "location": "290:215", "zIndex": "8", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "1b036b0e-1cbc-421f-9629-b816659670f5", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "26baee2a-f160-4c75-a047-eb02ab60e4c1", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "80e2b4f4-25c6-49b4-b445-fd94fef50f12", "name": "/dataSchema/aircraft/other/fin", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/fin"}}, {"identifier": "c75c859a-42df-4795-9e3a-0f9d207a2316", "name": "/dataSchema/aircraft/weight/WT", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/weight/WT"}}, {"identifier": "40c33242-c2c7-4468-883a-a42e05f70e81", "name": "/dataSchema/aircraft/other/D", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/D"}}, {"identifier": "85e47797-72de-45e2-8c29-bd3b60c0a19e", "name": "/dataSchema/aircraft/other/L", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/L"}}, {"identifier": "0b8f0ae7-3e9d-46bd-b555-75bba8ca54ea", "name": "/dataSchema/aircraft/weight/WF", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/weight/WF"}}, {"identifier": "6a807a31-76c4-4f36-8616-a5cd8dd805a0", "name": "/dataSchema/reference/ESF", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/reference/ESF"}}, {"identifier": "f61f9721-ccc4-4ba6-8180-8515066be035", "name": "/dataSchema/aircraft/geometry/Theta", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/geometry/Theta"}}, {"identifier": "310999bb-302f-4a90-9645-742f8f054090", "name": "/dataSchema/aircraft/weight/WE", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/weight/WE"}}, {"identifier": "378bac15-eb82-4c27-9636-93fbd13633f7", "name": "/dataSchema/aircraft/other/SFC", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/SFC"}}]}, {"identifier": "38897e64-426a-4f9b-96ee-6c5800c572db", "name": "MDA_loop_input_values", "location": "290:365", "zIndex": "9", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "2969044c-6aec-4f13-b52d-349cd75b32c6", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "027c4cc1-98ad-4821-b55c-1965a0b0190c", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "92add9d1-d46a-4e6e-a78e-c9987f6536b3", "name": "/dataSchema/aircraft/other/fin", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/fin"}}, {"identifier": "993b6095-13bf-46e9-b611-01eaeb48e6f4", "name": "/dataSchema/aircraft/weight/WT", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/weight/WT"}}, {"identifier": "3d405628-d71e-445a-96fd-eb47c87001eb", "name": "/dataSchema/aircraft/other/D", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/D"}}, {"identifier": "9e5cd9ef-3cd6-4ffd-b47a-247d5397dda0", "name": "/dataSchema/aircraft/other/L", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/L"}}, {"identifier": "c93df6b6-232e-4c33-8730-f8e90d7497f1", "name": "/dataSchema/aircraft/weight/WF", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/weight/WF"}}, {"identifier": "8593a947-0b21-4979-a177-e95ddedf940e", "name": "/dataSchema/reference/ESF", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/reference/ESF"}}, {"identifier": "3e0aa647-de9c-49ae-ba81-0ed746467250", "name": "/dataSchema/aircraft/geometry/Theta", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/geometry/Theta"}}, {"identifier": "d3f6149a-5478-4511-a567-2b90b065d332", "name": "/dataSchema/aircraft/weight/WE", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/weight/WE"}}, {"identifier": "ddb423d6-e8e2-4eef-9fab-b07088adc87b", "name": "/dataSchema/aircraft/other/SFC", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/dataSchema/aircraft/other/SFC"}}]}, {"identifier": "47fdfb60-8ff3-404f-8d92-6fe3830dbd7e", "name": "MDA_concurrency_resolution_B9C6c53f", "location": "270:1145", "zIndex": "10", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "f2e65263-e927-43be-8266-a2804ca1012a", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "699a3343-b236-4382-bd60-95bcf66e0f4c", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "8e92460d-ee7e-4d2c-b28e-f9b4e856c37b", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "0b7be759-e4ff-4f77-ab19-0b2c64acfa1d", "name": "MDA_concurrency_resolution_B9C6c53f_merger", "location": "365:1165", "zIndex": "11", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WT\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WT\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "a1cb38b8-18e4-498f-b6af-cfaadeeafd93", "name": "XML", "datatype": "FileReference"}, {"identifier": "c22c5e47-1007-4837-9ea1-9473b47c71e5", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "5fab16a3-d191-439f-b3e7-aaeb178a5425", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "4d8b8703-6c88-44f4-a5a3-6ea8a9032ef6", "name": "SSBJ-Aerodynamics_input_filter", "location": "510:435", "zIndex": "12", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry/AR |\n\t\t\t/dataSchema/aircraft/geometry/Lambda |\n\t\t\t/dataSchema/aircraft/geometry/Sref |\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/geometry/tc |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/weight/WT |\n\t\t\t/dataSchema/reference/ESF |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry/AR |\n\t\t\t/dataSchema/aircraft/geometry/Lambda |\n\t\t\t/dataSchema/aircraft/geometry/Sref |\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/geometry/tc |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/weight/WT |\n\t\t\t/dataSchema/reference/ESF |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "51cbb9c6-ccf1-4508-8546-228219f0234a", "name": "XML", "datatype": "FileReference"}, {"identifier": "335b547a-4dd8-434e-93eb-9671651e68ab", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "fba9fd41-78ba-4cd9-b368-90c6adeacd29", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "2fb56e1e-ab33-4739-8c27-f2a8c9533a70", "name": "SSBJ-Aerodynamics_output_filter", "location": "585:510", "zIndex": "13", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "e885d7bb-f9e1-4926-a8f6-8464755f8cf5", "name": "XML", "datatype": "FileReference"}, {"identifier": "4bd03a51-666f-43ea-9369-b249b885461a", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "478e0c83-8e88-42a6-b184-dabae673bc93", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "8d8d8bcf-b822-40d1-b58a-53c7647c0582", "name": "SSBJ-Aerodynamics_splitter", "location": "565:435", "zIndex": "14", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "19cfd338-30bf-462d-8603-a08568ac9065", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "94e05699-ed86-4baa-a625-836edc3cba9b", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "534a191a-61e6-4b35-9272-f9bc9040b30b", "name": "SSBJ-Aerodynamics_output_complement_filter", "location": "620:435", "zIndex": "15", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "71e31542-1d57-41e6-9013-be990ece4f02", "name": "XML", "datatype": "FileReference"}, {"identifier": "6555c3b4-af8a-4ac0-adff-6d998d7cd33d", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "ae3f148a-3d8f-4781-bf92-e4815ca4ce4c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "726a3708-13f4-4bc9-ac6b-7e76194462c9", "name": "SSBJ-Aerodynamics_merge_script", "location": "600:585", "zIndex": "16", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "fd042a26-48c4-4598-8710-095c4ee8e2fe", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "e36def10-6b53-4bd5-856c-76b1d382bd5a", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "bd784a4b-b17b-4acf-8a6e-6b653c51273d", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "68d1d318-e060-41a4-8253-428d21d0142e", "name": "SSBJ-Structures_input_filter", "location": "810:715", "zIndex": "17", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry/AR |\n\t\t\t/dataSchema/aircraft/geometry/Lambda |\n\t\t\t/dataSchema/aircraft/geometry/Sref |\n\t\t\t/dataSchema/aircraft/geometry/lambda |\n\t\t\t/dataSchema/aircraft/geometry/section |\n\t\t\t/dataSchema/aircraft/geometry/tc |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/weight/WE |\n\t\t\t/dataSchema/aircraft/weight/WFO |\n\t\t\t/dataSchema/aircraft/weight/WO\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry/AR |\n\t\t\t/dataSchema/aircraft/geometry/Lambda |\n\t\t\t/dataSchema/aircraft/geometry/Sref |\n\t\t\t/dataSchema/aircraft/geometry/lambda |\n\t\t\t/dataSchema/aircraft/geometry/section |\n\t\t\t/dataSchema/aircraft/geometry/tc |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/weight/WE |\n\t\t\t/dataSchema/aircraft/weight/WFO |\n\t\t\t/dataSchema/aircraft/weight/WO\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "41430138-4cfc-43e6-865a-e6a36d8e98c1", "name": "XML", "datatype": "FileReference"}, {"identifier": "f69cbcbe-f68e-4fbd-a153-af82c08160cd", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "0d68cf9a-24c6-4408-82f2-8ed821490176", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "07053abc-0a2f-4400-819e-528741a07d6b", "name": "SSBJ-Structures_output_filter", "location": "885:790", "zIndex": "18", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WT\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WT\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "1e563f56-6649-4faf-8dc1-400773abfcfa", "name": "XML", "datatype": "FileReference"}, {"identifier": "2f1989be-dc2c-4512-aa4a-b28ca9c8d5a4", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "7ef0edcd-4704-4e45-bb4e-072768b2bec1", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "4b0f55d3-4b9c-4583-971c-0eaa58a16159", "name": "SSBJ-Structures_splitter", "location": "865:715", "zIndex": "19", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "5675e6d1-2f72-486c-bc2c-848905dfc30e", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "17d7f660-9d16-4e70-a9d1-c7c033918b56", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "bd62c6fa-d8b0-4ecb-97fe-d6adead8603b", "name": "SSBJ-Structures_output_complement_filter", "location": "920:715", "zIndex": "20", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry/AR |\n\t\t\t/dataSchema/aircraft/geometry/Lambda |\n\t\t\t/dataSchema/aircraft/geometry/Sref |\n\t\t\t/dataSchema/aircraft/geometry/lambda |\n\t\t\t/dataSchema/aircraft/geometry/section |\n\t\t\t/dataSchema/aircraft/geometry/tc |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/weight/WBE |\n\t\t\t/dataSchema/aircraft/weight/WE |\n\t\t\t/dataSchema/aircraft/weight/WFO |\n\t\t\t/dataSchema/aircraft/weight/WO |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry/AR |\n\t\t\t/dataSchema/aircraft/geometry/Lambda |\n\t\t\t/dataSchema/aircraft/geometry/Sref |\n\t\t\t/dataSchema/aircraft/geometry/lambda |\n\t\t\t/dataSchema/aircraft/geometry/section |\n\t\t\t/dataSchema/aircraft/geometry/tc |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/weight/WBE |\n\t\t\t/dataSchema/aircraft/weight/WE |\n\t\t\t/dataSchema/aircraft/weight/WFO |\n\t\t\t/dataSchema/aircraft/weight/WO |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "f57b3b4e-2552-45cb-9281-3c75594536e0", "name": "XML", "datatype": "FileReference"}, {"identifier": "9f3210ef-6995-420b-a00e-79d7e836da21", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "4cfa6da7-1e92-43d0-bcb1-1b3fdd7d1fe6", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "68e2f0d1-b7c5-4bc9-9cee-66b672b00a6d", "name": "SSBJ-Structures_merge_script", "location": "900:865", "zIndex": "21", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "2d786aeb-31a7-44af-b835-71a85677c7d7", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "058ce72f-eeb5-4e57-b89d-14760157f1d2", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "c7d7d18c-4b4c-4bf4-8c88-9e097e2b32cc", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "3a0202d9-056b-4390-a2e7-e6212ecd6a8c", "name": "SSBJ-Performance_input_filter", "location": "1110:995", "zIndex": "22", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WT |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WT |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "783534f9-048a-4060-a806-467441b43fd7", "name": "XML", "datatype": "FileReference"}, {"identifier": "bb28dffb-a26f-4d7c-aa1c-83d30bfe0c87", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "ec6e5a1d-70c6-4599-90f7-5288ad9b0c4e", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "15044b1a-64c2-48fd-a7d8-9513e9d764ab", "name": "SSBJ-Performance_output_filter", "location": "1185:1070", "zIndex": "23", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/other/R\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/other/R\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "5c9b3235-8285-43e5-a063-e03eff9acd3e", "name": "XML", "datatype": "FileReference"}, {"identifier": "32d394d9-73fa-429a-bd42-83999e6368ff", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "6e421c5a-e106-4787-b9da-df58f4af0351", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "340fcb6a-bd1e-4b67-be3f-3b9f2b0ee3f1", "name": "SSBJ-Performance_splitter", "location": "1165:995", "zIndex": "24", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "05418332-4a97-450d-ab28-68efaf869832", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "93d29b2c-634e-438e-8144-c8acff8fd4fc", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "4106010d-aa02-4daf-ab7a-f5d2c515d17a", "name": "SSBJ-Performance_output_complement_filter", "location": "1220:995", "zIndex": "25", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "cf3fafd7-566c-435b-abea-af6bb0cc3a66", "name": "XML", "datatype": "FileReference"}, {"identifier": "4dca2624-b13a-40c2-9d7a-43321e788e83", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "34f2047c-6230-461b-ab89-efabc33b78a0", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "0962b9fd-f5ed-4a4a-b6b4-38f85891922f", "name": "SSBJ-Performance_merge_script", "location": "1200:1145", "zIndex": "26", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "cd1fac29-c7ca-477f-a6c5-2d8649d387e7", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "4ac5e24b-3828-40e0-881b-1de8926382bd", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "f22aeb36-5144-4575-aa0c-759ce7e4b2a5", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "da7e6803-d4fc-4a5c-b822-39fb3d879d26", "name": "SSBJ-Propulsion_input_filter", "location": "1410:1275", "zIndex": "27", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/weight/WBE |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/weight/WBE |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "c032570c-7786-4b93-a145-18a1a1958da4", "name": "XML", "datatype": "FileReference"}, {"identifier": "f9e91ca5-3e15-4ab8-9a91-33685bd9bcd4", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "3318d441-421e-4df0-801d-0b1ef807dd0f", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "b64d9ffc-0ae4-409d-aa0f-24d9163ad1da", "name": "SSBJ-Propulsion_output_filter", "location": "1485:1350", "zIndex": "28", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/weight/WE |\n\t\t\t/dataSchema/reference/ESF |\n\t\t\t/dataSchema/reference/Temp\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/SFC |\n\t\t\t/dataSchema/aircraft/weight/WE |\n\t\t\t/dataSchema/reference/ESF |\n\t\t\t/dataSchema/reference/Temp\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "261249b3-3a5f-431a-86af-b9d68447240b", "name": "XML", "datatype": "FileReference"}, {"identifier": "988a5049-13c4-4f0a-9b94-8811ef22d34c", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "7b171855-75fd-43ca-86b8-63f245aa3dd2", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "d2bb1a94-2c09-4a70-a855-c6d7ef469006", "name": "SSBJ-Propulsion_splitter", "location": "1465:1275", "zIndex": "29", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "096da060-4965-445d-8c46-f700822320b8", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "2d0b136a-9875-451b-a05a-95f02fe756d8", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "9722d1bd-b84e-41fd-b130-f5e0fa2a5b2f", "name": "SSBJ-Propulsion_output_complement_filter", "location": "1520:1275", "zIndex": "30", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight/WBE |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WFO |\n\t\t\t/dataSchema/aircraft/weight/WO |\n\t\t\t/dataSchema/aircraft/weight/WT |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry |\n\t\t\t/dataSchema/aircraft/other/CDmin |\n\t\t\t/dataSchema/aircraft/other/Cf |\n\t\t\t/dataSchema/aircraft/other/D |\n\t\t\t/dataSchema/aircraft/other/L |\n\t\t\t/dataSchema/aircraft/other/Nz |\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/aircraft/other/T |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/fin |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/aircraft/weight/WBE |\n\t\t\t/dataSchema/aircraft/weight/WF |\n\t\t\t/dataSchema/aircraft/weight/WFO |\n\t\t\t/dataSchema/aircraft/weight/WO |\n\t\t\t/dataSchema/aircraft/weight/WT |\n\t\t\t/dataSchema/reference/M |\n\t\t\t/dataSchema/reference/h |\n\t\t\t/dataSchema/scaledData\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "3d7db4f5-f897-4d04-bfa2-cfe001e3a25c", "name": "XML", "datatype": "FileReference"}, {"identifier": "7e6a8a93-6a14-4662-8f4d-a8e444e5b5d4", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "34cf272f-3114-4426-86c7-9f67502adae8", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "5ab595e3-68ac-4c62-bac1-ac6aae77a97b", "name": "SSBJ-Propulsion_merge_script", "location": "1500:1425", "zIndex": "31", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "85b045c1-2b34-46c6-87f5-0779bebe1659", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "16f7a7c6-6e78-4504-9919-7142fb4735b7", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "39bcbb6e-ff69-4491-8183-d624c3dd8fc9", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "9ffeee4c-a032-421e-b24c-164cb3387df7", "name": "SSBJ-Constraints_input_filter", "location": "1710:1555", "zIndex": "32", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/reference/ESF |\n\t\t\t/dataSchema/reference/Temp |\n\t\t\t/dataSchema/scaledData/DT/scaler |\n\t\t\t/dataSchema/scaledData/ESF/scaler |\n\t\t\t/dataSchema/scaledData/Temp/scaler |\n\t\t\t/dataSchema/scaledData/Theta/scaler |\n\t\t\t/dataSchema/scaledData/dpdx/scaler |\n\t\t\t/dataSchema/scaledData/sigma1/scaler |\n\t\t\t/dataSchema/scaledData/sigma2/scaler |\n\t\t\t/dataSchema/scaledData/sigma3/scaler |\n\t\t\t/dataSchema/scaledData/sigma4/scaler |\n\t\t\t/dataSchema/scaledData/sigma5/scaler\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/geometry/Theta |\n\t\t\t/dataSchema/aircraft/other/DT |\n\t\t\t/dataSchema/aircraft/other/dpdx |\n\t\t\t/dataSchema/aircraft/other/sigma1 |\n\t\t\t/dataSchema/aircraft/other/sigma2 |\n\t\t\t/dataSchema/aircraft/other/sigma3 |\n\t\t\t/dataSchema/aircraft/other/sigma4 |\n\t\t\t/dataSchema/aircraft/other/sigma5 |\n\t\t\t/dataSchema/reference/ESF |\n\t\t\t/dataSchema/reference/Temp |\n\t\t\t/dataSchema/scaledData/DT/scaler |\n\t\t\t/dataSchema/scaledData/ESF/scaler |\n\t\t\t/dataSchema/scaledData/Temp/scaler |\n\t\t\t/dataSchema/scaledData/Theta/scaler |\n\t\t\t/dataSchema/scaledData/dpdx/scaler |\n\t\t\t/dataSchema/scaledData/sigma1/scaler |\n\t\t\t/dataSchema/scaledData/sigma2/scaler |\n\t\t\t/dataSchema/scaledData/sigma3/scaler |\n\t\t\t/dataSchema/scaledData/sigma4/scaler |\n\t\t\t/dataSchema/scaledData/sigma5/scaler\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "2c0cb103-e759-4cde-b621-094aecb247a0", "name": "XML", "datatype": "FileReference"}, {"identifier": "9855184f-0922-43ed-9cf4-f93bff24d0bc", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "4a909ef8-7a23-4f46-ab88-76ba81ebb1f4", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "7ea0084d-edb7-41ac-bd97-26afa9ccbedc", "name": "SSBJ-Constraints_output_filter", "location": "1785:1630", "zIndex": "33", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/scaledData/DT/value |\n\t\t\t/dataSchema/scaledData/ESF/value |\n\t\t\t/dataSchema/scaledData/Temp/value |\n\t\t\t/dataSchema/scaledData/Theta/value |\n\t\t\t/dataSchema/scaledData/dpdx/value |\n\t\t\t/dataSchema/scaledData/sigma1/value |\n\t\t\t/dataSchema/scaledData/sigma2/value |\n\t\t\t/dataSchema/scaledData/sigma3/value |\n\t\t\t/dataSchema/scaledData/sigma4/value |\n\t\t\t/dataSchema/scaledData/sigma5/value\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/scaledData/DT/value |\n\t\t\t/dataSchema/scaledData/ESF/value |\n\t\t\t/dataSchema/scaledData/Temp/value |\n\t\t\t/dataSchema/scaledData/Theta/value |\n\t\t\t/dataSchema/scaledData/dpdx/value |\n\t\t\t/dataSchema/scaledData/sigma1/value |\n\t\t\t/dataSchema/scaledData/sigma2/value |\n\t\t\t/dataSchema/scaledData/sigma3/value |\n\t\t\t/dataSchema/scaledData/sigma4/value |\n\t\t\t/dataSchema/scaledData/sigma5/value\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "1a0babe2-3488-4af6-ae67-15eaeb52ef20", "name": "XML", "datatype": "FileReference"}, {"identifier": "7fe0ed46-f35f-4ee8-928b-73ba803b9b98", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "f941982b-3c28-43ea-9c79-b13b8c500b70", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "b0626999-301a-40ed-aa8e-b96d761d07b7", "name": "SSBJ-Constraints_splitter", "location": "1765:1555", "zIndex": "34", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "7c48cb8f-0cbb-4362-93f7-936c50a8c71d", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "489cc75f-f533-46d0-ab6e-b243a0c972e6", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "7fb0b14c-f107-47f9-b8d2-752403697255", "name": "SSBJ-Constraints_output_complement_filter", "location": "1820:1555", "zIndex": "35", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData/DT/scaler |\n\t\t\t/dataSchema/scaledData/ESF/scaler |\n\t\t\t/dataSchema/scaledData/R |\n\t\t\t/dataSchema/scaledData/Temp/scaler |\n\t\t\t/dataSchema/scaledData/Theta/scaler |\n\t\t\t/dataSchema/scaledData/dpdx/scaler |\n\t\t\t/dataSchema/scaledData/sigma1/scaler |\n\t\t\t/dataSchema/scaledData/sigma2/scaler |\n\t\t\t/dataSchema/scaledData/sigma3/scaler |\n\t\t\t/dataSchema/scaledData/sigma4/scaler |\n\t\t\t/dataSchema/scaledData/sigma5/scaler\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData/DT/scaler |\n\t\t\t/dataSchema/scaledData/ESF/scaler |\n\t\t\t/dataSchema/scaledData/R |\n\t\t\t/dataSchema/scaledData/Temp/scaler |\n\t\t\t/dataSchema/scaledData/Theta/scaler |\n\t\t\t/dataSchema/scaledData/dpdx/scaler |\n\t\t\t/dataSchema/scaledData/sigma1/scaler |\n\t\t\t/dataSchema/scaledData/sigma2/scaler |\n\t\t\t/dataSchema/scaledData/sigma3/scaler |\n\t\t\t/dataSchema/scaledData/sigma4/scaler |\n\t\t\t/dataSchema/scaledData/sigma5/scaler\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "faf6794b-24c4-48bd-9fc0-69681827155a", "name": "XML", "datatype": "FileReference"}, {"identifier": "bdb8b6ad-544e-486c-b4d1-589281f6836f", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "a97a6f49-68a8-4bcf-a624-1195b0b24ce5", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "7c7362ae-32b0-4af1-a979-9c2f7dbfb1f6", "name": "SSBJ-Constraints_merge_script", "location": "1800:1705", "zIndex": "36", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "a6ff464e-d3ce-4274-a198-06184c982eb4", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "15218d2c-5146-4fc9-b28f-7820eeb67927", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "e9b3094e-b6e7-4f2d-b583-a5aa376a4da8", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "08c5270e-7ddd-425c-9ff2-f2196c321b21", "name": "SSBJ-Objective_input_filter", "location": "2010:1835", "zIndex": "37", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/scaledData/R/scaler\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft/other/R |\n\t\t\t/dataSchema/scaledData/R/scaler\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "cf7a7a79-a6a6-429f-a292-cf1bb996a121", "name": "XML", "datatype": "FileReference"}, {"identifier": "18f78db2-b7ab-4f9c-8d8c-114708f38fd1", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "44e5a20f-a237-4c0e-91a0-3b2e5448a15c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "bc97b32a-bbb9-46fe-b80b-ae7726002810", "name": "SSBJ-Objective_output_filter", "location": "2085:1910", "zIndex": "38", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/scaledData/R/value\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/scaledData/R/value\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "70fe58c1-9f60-4e10-9cec-0184fb7c3fd6", "name": "XML", "datatype": "FileReference"}, {"identifier": "ccb2c424-0330-477d-825e-50704802c180", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "aeeaac3d-dd7a-4c61-a1e0-63b31917c6c9", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "9583c6fa-4848-42b9-ac35-b68209275917", "name": "SSBJ-Objective_splitter", "location": "2065:1835", "zIndex": "39", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "63ceb697-3526-4448-b93b-a41f85cbf4c7", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "03ccc863-e2ad-4535-aa9f-be48e18e03ff", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "7a7405a1-2234-43d4-8704-b6c96d16a7e5", "name": "SSBJ-Objective_output_complement_filter", "location": "2120:1835", "zIndex": "40", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/dataSchema/aircraft |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData/DT |\n\t\t\t/dataSchema/scaledData/ESF |\n\t\t\t/dataSchema/scaledData/R/scaler |\n\t\t\t/dataSchema/scaledData/Temp |\n\t\t\t/dataSchema/scaledData/Theta |\n\t\t\t/dataSchema/scaledData/dpdx |\n\t\t\t/dataSchema/scaledData/sigma1 |\n\t\t\t/dataSchema/scaledData/sigma2 |\n\t\t\t/dataSchema/scaledData/sigma3 |\n\t\t\t/dataSchema/scaledData/sigma4 |\n\t\t\t/dataSchema/scaledData/sigma5\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/dataSchema/aircraft |\n\t\t\t/dataSchema/reference |\n\t\t\t/dataSchema/scaledData/DT |\n\t\t\t/dataSchema/scaledData/ESF |\n\t\t\t/dataSchema/scaledData/R/scaler |\n\t\t\t/dataSchema/scaledData/Temp |\n\t\t\t/dataSchema/scaledData/Theta |\n\t\t\t/dataSchema/scaledData/dpdx |\n\t\t\t/dataSchema/scaledData/sigma1 |\n\t\t\t/dataSchema/scaledData/sigma2 |\n\t\t\t/dataSchema/scaledData/sigma3 |\n\t\t\t/dataSchema/scaledData/sigma4 |\n\t\t\t/dataSchema/scaledData/sigma5\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "1e164ddc-8a10-495a-9cc6-61c10697f6bf", "name": "XML", "datatype": "FileReference"}, {"identifier": "3dab617d-5f63-4065-aef1-32138d2e193d", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "8ba73057-b10a-4802-9de7-d760e8d36012", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "0488188a-f10d-40c3-9fb8-a7e19a86895f", "name": "SSBJ-Objective_merge_script", "location": "2100:1985", "zIndex": "41", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "13d3d3e5-eece-4b04-af12-e290b4952290", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "e90fb252-7b6d-4ab4-aba7-9ae135ae55c5", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "2a5f01e9-f900-409e-b3ca-6b62119f178f", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "52d90a12-5ccf-4e8d-9251-5aadd578b361", "name": "Input_Provider", "location": "150:100", "zIndex": "42", "active": "true", "component": {"identifier": "de.rcenvironment.inputprovider", "version": "3.2", "name": "Input Provider"}, "configuration": {"storeComponentHistoryData": "true"}, "dynamicOutputs": [{"identifier": "312f90c4-4120-4cc4-b63d-5691e6053397", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"fileSourceType": "atWorkflowStart", "startValue": ""}}]}, {"identifier": "7eac02eb-1e29-4264-bc93-7ef0006b8dda", "name": "SSBJ-Constraints_Output_Writer", "location": "2250:1725", "zIndex": "43", "active": "true", "component": {"identifier": "de.rcenvironment.outputwriter", "version": "2.0", "name": "Output Writer"}, "configuration": {"OWWritePath": "${targetRootFolder}", "SelectRootOnWorkflowStart": "true", "SelectedRoot": "", "storeComponentHistoryData": "true"}, "dynamicInputs": [{"identifier": "8fc9a071-d5fc-498f-b434-c8524409f768", "name": "XML", "epIdentifier": "default", "group": "write", "datatype": "FileReference", "metadata": {"filename": "[Timestamp at workflow start]__[Workflow name]__[Execution count].xml", "folderForSaving": "[root]"}}], "dynamicInputGroups": [{"identifier": "88b2aecc-2e3e-4477-887f-a1587d085780", "name": "88b2aecc-2e3e-4477-887f-a1587d085780", "epIdentifier": "dynamicAndGroup"}]}, {"identifier": "b2084209-dbcb-4b89-8dcb-359e526ee00b", "name": "SSBJ-Objective_Output_Writer", "location": "2250:2005", "zIndex": "44", "active": "true", "component": {"identifier": "de.rcenvironment.outputwriter", "version": "2.0", "name": "Output Writer"}, "configuration": {"OWWritePath": "${targetRootFolder}", "SelectRootOnWorkflowStart": "true", "SelectedRoot": "", "storeComponentHistoryData": "true"}, "dynamicInputs": [{"identifier": "8ec050ae-7639-46b3-b980-bef033b3926d", "name": "XML", "epIdentifier": "default", "group": "write", "datatype": "FileReference", "metadata": {"filename": "[Timestamp at workflow start]__[Workflow name]__[Execution count].xml", "folderForSaving": "[root]"}}], "dynamicInputGroups": [{"identifier": "71349528-8f7b-43f7-a660-c06302d00d8b", "name": "71349528-8f7b-43f7-a660-c06302d00d8b", "epIdentifier": "dynamicAndGroup"}]}], "connections": [{"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "26baee2a-f160-4c75-a047-eb02ab60e4c1", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "68592b43-3432-48ce-8533-11cf805fca8d"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "80e2b4f4-25c6-49b4-b445-fd94fef50f12", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "9c8e6a13-6f1f-4109-9d0d-1750a027da14"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "c75c859a-42df-4795-9e3a-0f9d207a2316", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "c68e21d2-d440-47ff-8861-9e5990573108"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "40c33242-c2c7-4468-883a-a42e05f70e81", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "40171280-3cf0-4cb0-9ec8-b8ee14cfa411"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "85e47797-72de-45e2-8c29-bd3b60c0a19e", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "7a66b1d3-0b71-4469-a92e-fd14f50aeac0"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "0b8f0ae7-3e9d-46bd-b555-75bba8ca54ea", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "882e8192-4c2e-4410-9426-e6a30139438d"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "6a807a31-76c4-4f36-8616-a5cd8dd805a0", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "0d8771ba-0434-43d4-893d-7c1d821c3cb3"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "f61f9721-ccc4-4ba6-8180-8515066be035", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "f59ffe2e-d115-4446-b934-21a1d9337658"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "310999bb-302f-4a90-9645-742f8f054090", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "030e5c1f-e15a-4c1d-862c-d4f0d592a012"}, {"source": "e0e211f3-03e9-4920-a94b-ac0775284387", "output": "378bac15-eb82-4c27-9636-93fbd13633f7", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "a70627a4-47ba-4a4e-8d29-2e2dc7d8824b"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "027c4cc1-98ad-4821-b55c-1965a0b0190c", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "79156375-ddfc-42be-a447-480ae467761d"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "92add9d1-d46a-4e6e-a78e-c9987f6536b3", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "232f70f8-7357-45f0-9ec5-c35d5a4ee521"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "993b6095-13bf-46e9-b611-01eaeb48e6f4", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "6fecbf71-07a3-455e-8570-bffe46171117"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "3d405628-d71e-445a-96fd-eb47c87001eb", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "236bd2c6-de37-4482-99e2-1b9f2e2b5700"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "9e5cd9ef-3cd6-4ffd-b47a-247d5397dda0", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "74e15782-f749-4fbd-8a2a-90a34e51ce03"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "c93df6b6-232e-4c33-8730-f8e90d7497f1", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "d5392e64-06e7-47a9-a492-68df01080dc8"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "8593a947-0b21-4979-a177-e95ddedf940e", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "716fe28a-e8d1-4431-898e-bb25f7699217"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "3e0aa647-de9c-49ae-ba81-0ed746467250", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "9d67dfea-df0f-46ad-8262-4b930f244d95"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "d3f6149a-5478-4511-a567-2b90b065d332", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "ba76fc48-7cf6-4543-a961-53488219be44"}, {"source": "38897e64-426a-4f9b-96ee-6c5800c572db", "output": "ddb423d6-e8e2-4eef-9fab-b07088adc87b", "target": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "input": "a7565a3f-ebc7-4fe2-a900-5d4119670c2f"}, {"source": "0b7be759-e4ff-4f77-ab19-0b2c64acfa1d", "output": "5fab16a3-d191-439f-b3e7-aaeb178a5425", "target": "47fdfb60-8ff3-404f-8d92-6fe3830dbd7e", "input": "699a3343-b236-4382-bd60-95bcf66e0f4c"}, {"source": "5ab595e3-68ac-4c62-bac1-ac6aae77a97b", "output": "39bcbb6e-ff69-4491-8183-d624c3dd8fc9", "target": "47fdfb60-8ff3-404f-8d92-6fe3830dbd7e", "input": "f2e65263-e927-43be-8266-a2804ca1012a"}, {"source": "0962b9fd-f5ed-4a4a-b6b4-38f85891922f", "output": "f22aeb36-5144-4575-aa0c-759ce7e4b2a5", "target": "0b7be759-e4ff-4f77-ab19-0b2c64acfa1d", "input": "a1cb38b8-18e4-498f-b6af-cfaadeeafd93"}, {"source": "0962b9fd-f5ed-4a4a-b6b4-38f85891922f", "output": "f22aeb36-5144-4575-aa0c-759ce7e4b2a5", "target": "0b7be759-e4ff-4f77-ab19-0b2c64acfa1d", "input": "c22c5e47-1007-4837-9ea1-9473b47c71e5"}, {"source": "47fdfb60-8ff3-404f-8d92-6fe3830dbd7e", "output": "8e92460d-ee7e-4d2c-b28e-f9b4e856c37b", "target": "38897e64-426a-4f9b-96ee-6c5800c572db", "input": "2969044c-6aec-4f13-b52d-349cd75b32c6"}, {"source": "8d8d8bcf-b822-40d1-b58a-53c7647c0582", "output": "94e05699-ed86-4baa-a625-836edc3cba9b", "target": "4d8b8703-6c88-44f4-a5a3-6ea8a9032ef6", "input": "51cbb9c6-ccf1-4508-8546-228219f0234a"}, {"source": "8d8d8bcf-b822-40d1-b58a-53c7647c0582", "output": "94e05699-ed86-4baa-a625-836edc3cba9b", "target": "4d8b8703-6c88-44f4-a5a3-6ea8a9032ef6", "input": "335b547a-4dd8-434e-93eb-9671651e68ab"}, {"source": "4d8b8703-6c88-44f4-a5a3-6ea8a9032ef6", "output": "fba9fd41-78ba-4cd9-b368-90c6adeacd29", "target": "c15df9cd-9f39-4dbf-b7a1-596bdd858a69", "input": "24b08083-54e2-4a48-bea2-48beead75d6d"}, {"source": "8d8d8bcf-b822-40d1-b58a-53c7647c0582", "output": "94e05699-ed86-4baa-a625-836edc3cba9b", "target": "534a191a-61e6-4b35-9272-f9bc9040b30b", "input": "71e31542-1d57-41e6-9013-be990ece4f02"}, {"source": "8d8d8bcf-b822-40d1-b58a-53c7647c0582", "output": "94e05699-ed86-4baa-a625-836edc3cba9b", "target": "534a191a-61e6-4b35-9272-f9bc9040b30b", "input": "6555c3b4-af8a-4ac0-adff-6d998d7cd33d"}, {"source": "534a191a-61e6-4b35-9272-f9bc9040b30b", "output": "ae3f148a-3d8f-4781-bf92-e4815ca4ce4c", "target": "726a3708-13f4-4bc9-ac6b-7e76194462c9", "input": "fd042a26-48c4-4598-8710-095c4ee8e2fe"}, {"source": "c15df9cd-9f39-4dbf-b7a1-596bdd858a69", "output": "f05d616d-f2ee-47dc-93c0-573a56276304", "target": "2fb56e1e-ab33-4739-8c27-f2a8c9533a70", "input": "e885d7bb-f9e1-4926-a8f6-8464755f8cf5"}, {"source": "c15df9cd-9f39-4dbf-b7a1-596bdd858a69", "output": "f05d616d-f2ee-47dc-93c0-573a56276304", "target": "2fb56e1e-ab33-4739-8c27-f2a8c9533a70", "input": "4bd03a51-666f-43ea-9369-b249b885461a"}, {"source": "2fb56e1e-ab33-4739-8c27-f2a8c9533a70", "output": "478e0c83-8e88-42a6-b184-dabae673bc93", "target": "726a3708-13f4-4bc9-ac6b-7e76194462c9", "input": "e36def10-6b53-4bd5-856c-76b1d382bd5a"}, {"source": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "output": "5edfc257-9ea6-4692-a15c-db46dad3673f", "target": "8d8d8bcf-b822-40d1-b58a-53c7647c0582", "input": "19cfd338-30bf-462d-8603-a08568ac9065"}, {"source": "4b0f55d3-4b9c-4583-971c-0eaa58a16159", "output": "17d7f660-9d16-4e70-a9d1-c7c033918b56", "target": "68d1d318-e060-41a4-8253-428d21d0142e", "input": "41430138-4cfc-43e6-865a-e6a36d8e98c1"}, {"source": "4b0f55d3-4b9c-4583-971c-0eaa58a16159", "output": "17d7f660-9d16-4e70-a9d1-c7c033918b56", "target": "68d1d318-e060-41a4-8253-428d21d0142e", "input": "f69cbcbe-f68e-4fbd-a153-af82c08160cd"}, {"source": "68d1d318-e060-41a4-8253-428d21d0142e", "output": "0d68cf9a-24c6-4408-82f2-8ed821490176", "target": "65c5efbc-c9e5-4e72-8f4d-953a75cb2338", "input": "0bb5d261-dbd0-45ea-9a4f-f90df39e51bd"}, {"source": "4b0f55d3-4b9c-4583-971c-0eaa58a16159", "output": "17d7f660-9d16-4e70-a9d1-c7c033918b56", "target": "bd62c6fa-d8b0-4ecb-97fe-d6adead8603b", "input": "f57b3b4e-2552-45cb-9281-3c75594536e0"}, {"source": "4b0f55d3-4b9c-4583-971c-0eaa58a16159", "output": "17d7f660-9d16-4e70-a9d1-c7c033918b56", "target": "bd62c6fa-d8b0-4ecb-97fe-d6adead8603b", "input": "9f3210ef-6995-420b-a00e-79d7e836da21"}, {"source": "bd62c6fa-d8b0-4ecb-97fe-d6adead8603b", "output": "4cfa6da7-1e92-43d0-bcb1-1b3fdd7d1fe6", "target": "68e2f0d1-b7c5-4bc9-9cee-66b672b00a6d", "input": "2d786aeb-31a7-44af-b835-71a85677c7d7"}, {"source": "65c5efbc-c9e5-4e72-8f4d-953a75cb2338", "output": "222e1b8d-1331-4f24-a7f4-966f4fe6e0f2", "target": "07053abc-0a2f-4400-819e-528741a07d6b", "input": "1e563f56-6649-4faf-8dc1-400773abfcfa"}, {"source": "65c5efbc-c9e5-4e72-8f4d-953a75cb2338", "output": "222e1b8d-1331-4f24-a7f4-966f4fe6e0f2", "target": "07053abc-0a2f-4400-819e-528741a07d6b", "input": "2f1989be-dc2c-4512-aa4a-b28ca9c8d5a4"}, {"source": "07053abc-0a2f-4400-819e-528741a07d6b", "output": "7ef0edcd-4704-4e45-bb4e-072768b2bec1", "target": "68e2f0d1-b7c5-4bc9-9cee-66b672b00a6d", "input": "058ce72f-eeb5-4e57-b89d-14760157f1d2"}, {"source": "726a3708-13f4-4bc9-ac6b-7e76194462c9", "output": "bd784a4b-b17b-4acf-8a6e-6b653c51273d", "target": "4b0f55d3-4b9c-4583-971c-0eaa58a16159", "input": "5675e6d1-2f72-486c-bc2c-848905dfc30e"}, {"source": "340fcb6a-bd1e-4b67-be3f-3b9f2b0ee3f1", "output": "93d29b2c-634e-438e-8144-c8acff8fd4fc", "target": "3a0202d9-056b-4390-a2e7-e6212ecd6a8c", "input": "783534f9-048a-4060-a806-467441b43fd7"}, {"source": "340fcb6a-bd1e-4b67-be3f-3b9f2b0ee3f1", "output": "93d29b2c-634e-438e-8144-c8acff8fd4fc", "target": "3a0202d9-056b-4390-a2e7-e6212ecd6a8c", "input": "bb28dffb-a26f-4d7c-aa1c-83d30bfe0c87"}, {"source": "3a0202d9-056b-4390-a2e7-e6212ecd6a8c", "output": "ec6e5a1d-70c6-4599-90f7-5288ad9b0c4e", "target": "f3e48633-2c2e-442f-bc0a-0e3a1d9e364b", "input": "1148c87d-e21d-439d-94a2-bc01766ae1da"}, {"source": "340fcb6a-bd1e-4b67-be3f-3b9f2b0ee3f1", "output": "93d29b2c-634e-438e-8144-c8acff8fd4fc", "target": "4106010d-aa02-4daf-ab7a-f5d2c515d17a", "input": "cf3fafd7-566c-435b-abea-af6bb0cc3a66"}, {"source": "340fcb6a-bd1e-4b67-be3f-3b9f2b0ee3f1", "output": "93d29b2c-634e-438e-8144-c8acff8fd4fc", "target": "4106010d-aa02-4daf-ab7a-f5d2c515d17a", "input": "4dca2624-b13a-40c2-9d7a-43321e788e83"}, {"source": "4106010d-aa02-4daf-ab7a-f5d2c515d17a", "output": "34f2047c-6230-461b-ab89-efabc33b78a0", "target": "0962b9fd-f5ed-4a4a-b6b4-38f85891922f", "input": "cd1fac29-c7ca-477f-a6c5-2d8649d387e7"}, {"source": "f3e48633-2c2e-442f-bc0a-0e3a1d9e364b", "output": "dd0cb0cd-b7f6-4ee7-9315-088c19342edf", "target": "15044b1a-64c2-48fd-a7d8-9513e9d764ab", "input": "5c9b3235-8285-43e5-a063-e03eff9acd3e"}, {"source": "f3e48633-2c2e-442f-bc0a-0e3a1d9e364b", "output": "dd0cb0cd-b7f6-4ee7-9315-088c19342edf", "target": "15044b1a-64c2-48fd-a7d8-9513e9d764ab", "input": "32d394d9-73fa-429a-bd42-83999e6368ff"}, {"source": "15044b1a-64c2-48fd-a7d8-9513e9d764ab", "output": "6e421c5a-e106-4787-b9da-df58f4af0351", "target": "0962b9fd-f5ed-4a4a-b6b4-38f85891922f", "input": "4ac5e24b-3828-40e0-881b-1de8926382bd"}, {"source": "68e2f0d1-b7c5-4bc9-9cee-66b672b00a6d", "output": "c7d7d18c-4b4c-4bf4-8c88-9e097e2b32cc", "target": "340fcb6a-bd1e-4b67-be3f-3b9f2b0ee3f1", "input": "05418332-4a97-450d-ab28-68efaf869832"}, {"source": "d2bb1a94-2c09-4a70-a855-c6d7ef469006", "output": "2d0b136a-9875-451b-a05a-95f02fe756d8", "target": "da7e6803-d4fc-4a5c-b822-39fb3d879d26", "input": "c032570c-7786-4b93-a145-18a1a1958da4"}, {"source": "d2bb1a94-2c09-4a70-a855-c6d7ef469006", "output": "2d0b136a-9875-451b-a05a-95f02fe756d8", "target": "da7e6803-d4fc-4a5c-b822-39fb3d879d26", "input": "f9e91ca5-3e15-4ab8-9a91-33685bd9bcd4"}, {"source": "da7e6803-d4fc-4a5c-b822-39fb3d879d26", "output": "3318d441-421e-4df0-801d-0b1ef807dd0f", "target": "b4567702-98c3-49b7-ab3c-b0727fecc9b7", "input": "6ec3e747-d47f-4c43-9674-291bc08169f8"}, {"source": "d2bb1a94-2c09-4a70-a855-c6d7ef469006", "output": "2d0b136a-9875-451b-a05a-95f02fe756d8", "target": "9722d1bd-b84e-41fd-b130-f5e0fa2a5b2f", "input": "3d7db4f5-f897-4d04-bfa2-cfe001e3a25c"}, {"source": "d2bb1a94-2c09-4a70-a855-c6d7ef469006", "output": "2d0b136a-9875-451b-a05a-95f02fe756d8", "target": "9722d1bd-b84e-41fd-b130-f5e0fa2a5b2f", "input": "7e6a8a93-6a14-4662-8f4d-a8e444e5b5d4"}, {"source": "9722d1bd-b84e-41fd-b130-f5e0fa2a5b2f", "output": "34cf272f-3114-4426-86c7-9f67502adae8", "target": "5ab595e3-68ac-4c62-bac1-ac6aae77a97b", "input": "85b045c1-2b34-46c6-87f5-0779bebe1659"}, {"source": "b4567702-98c3-49b7-ab3c-b0727fecc9b7", "output": "59cef76a-0462-4287-b916-b6a47d502354", "target": "b64d9ffc-0ae4-409d-aa0f-24d9163ad1da", "input": "261249b3-3a5f-431a-86af-b9d68447240b"}, {"source": "b4567702-98c3-49b7-ab3c-b0727fecc9b7", "output": "59cef76a-0462-4287-b916-b6a47d502354", "target": "b64d9ffc-0ae4-409d-aa0f-24d9163ad1da", "input": "988a5049-13c4-4f0a-9b94-8811ef22d34c"}, {"source": "b64d9ffc-0ae4-409d-aa0f-24d9163ad1da", "output": "7b171855-75fd-43ca-86b8-63f245aa3dd2", "target": "5ab595e3-68ac-4c62-bac1-ac6aae77a97b", "input": "16f7a7c6-6e78-4504-9919-7142fb4735b7"}, {"source": "726a3708-13f4-4bc9-ac6b-7e76194462c9", "output": "bd784a4b-b17b-4acf-8a6e-6b653c51273d", "target": "d2bb1a94-2c09-4a70-a855-c6d7ef469006", "input": "096da060-4965-445d-8c46-f700822320b8"}, {"source": "b0626999-301a-40ed-aa8e-b96d761d07b7", "output": "489cc75f-f533-46d0-ab6e-b243a0c972e6", "target": "9ffeee4c-a032-421e-b24c-164cb3387df7", "input": "2c0cb103-e759-4cde-b621-094aecb247a0"}, {"source": "b0626999-301a-40ed-aa8e-b96d761d07b7", "output": "489cc75f-f533-46d0-ab6e-b243a0c972e6", "target": "9ffeee4c-a032-421e-b24c-164cb3387df7", "input": "9855184f-0922-43ed-9cf4-f93bff24d0bc"}, {"source": "9ffeee4c-a032-421e-b24c-164cb3387df7", "output": "4a909ef8-7a23-4f46-ab88-76ba81ebb1f4", "target": "c8127432-139b-4cbb-b2e3-d3eb797b9419", "input": "7e6c1950-5aaa-43a7-8bd9-4dd51a1ff467"}, {"source": "b0626999-301a-40ed-aa8e-b96d761d07b7", "output": "489cc75f-f533-46d0-ab6e-b243a0c972e6", "target": "7fb0b14c-f107-47f9-b8d2-752403697255", "input": "faf6794b-24c4-48bd-9fc0-69681827155a"}, {"source": "b0626999-301a-40ed-aa8e-b96d761d07b7", "output": "489cc75f-f533-46d0-ab6e-b243a0c972e6", "target": "7fb0b14c-f107-47f9-b8d2-752403697255", "input": "bdb8b6ad-544e-486c-b4d1-589281f6836f"}, {"source": "7fb0b14c-f107-47f9-b8d2-752403697255", "output": "a97a6f49-68a8-4bcf-a624-1195b0b24ce5", "target": "7c7362ae-32b0-4af1-a979-9c2f7dbfb1f6", "input": "a6ff464e-d3ce-4274-a198-06184c982eb4"}, {"source": "c8127432-139b-4cbb-b2e3-d3eb797b9419", "output": "50b99380-07e1-4fb0-88c0-a50d63aca359", "target": "7ea0084d-edb7-41ac-bd97-26afa9ccbedc", "input": "1a0babe2-3488-4af6-ae67-15eaeb52ef20"}, {"source": "c8127432-139b-4cbb-b2e3-d3eb797b9419", "output": "50b99380-07e1-4fb0-88c0-a50d63aca359", "target": "7ea0084d-edb7-41ac-bd97-26afa9ccbedc", "input": "7fe0ed46-f35f-4ee8-928b-73ba803b9b98"}, {"source": "7ea0084d-edb7-41ac-bd97-26afa9ccbedc", "output": "f941982b-3c28-43ea-9c79-b13b8c500b70", "target": "7c7362ae-32b0-4af1-a979-9c2f7dbfb1f6", "input": "15218d2c-5146-4fc9-b28f-7820eeb67927"}, {"source": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "output": "772dd7bb-ec09-4573-b137-6595eaee1067", "target": "b0626999-301a-40ed-aa8e-b96d761d07b7", "input": "7c48cb8f-0cbb-4362-93f7-936c50a8c71d"}, {"source": "9583c6fa-4848-42b9-ac35-b68209275917", "output": "03ccc863-e2ad-4535-aa9f-be48e18e03ff", "target": "08c5270e-7ddd-425c-9ff2-f2196c321b21", "input": "cf7a7a79-a6a6-429f-a292-cf1bb996a121"}, {"source": "9583c6fa-4848-42b9-ac35-b68209275917", "output": "03ccc863-e2ad-4535-aa9f-be48e18e03ff", "target": "08c5270e-7ddd-425c-9ff2-f2196c321b21", "input": "18f78db2-b7ab-4f9c-8d8c-114708f38fd1"}, {"source": "08c5270e-7ddd-425c-9ff2-f2196c321b21", "output": "44e5a20f-a237-4c0e-91a0-3b2e5448a15c", "target": "6caad399-b4a3-4bcd-afac-4f26662720ae", "input": "d275d91f-0ca9-45a4-b032-673a1e3b57e6"}, {"source": "9583c6fa-4848-42b9-ac35-b68209275917", "output": "03ccc863-e2ad-4535-aa9f-be48e18e03ff", "target": "7a7405a1-2234-43d4-8704-b6c96d16a7e5", "input": "1e164ddc-8a10-495a-9cc6-61c10697f6bf"}, {"source": "9583c6fa-4848-42b9-ac35-b68209275917", "output": "03ccc863-e2ad-4535-aa9f-be48e18e03ff", "target": "7a7405a1-2234-43d4-8704-b6c96d16a7e5", "input": "3dab617d-5f63-4065-aef1-32138d2e193d"}, {"source": "7a7405a1-2234-43d4-8704-b6c96d16a7e5", "output": "8ba73057-b10a-4802-9de7-d760e8d36012", "target": "0488188a-f10d-40c3-9fb8-a7e19a86895f", "input": "13d3d3e5-eece-4b04-af12-e290b4952290"}, {"source": "6caad399-b4a3-4bcd-afac-4f26662720ae", "output": "cbc2b3e8-6f45-4497-9b94-578e3230d1af", "target": "bc97b32a-bbb9-46fe-b80b-ae7726002810", "input": "70fe58c1-9f60-4e10-9cec-0184fb7c3fd6"}, {"source": "6caad399-b4a3-4bcd-afac-4f26662720ae", "output": "cbc2b3e8-6f45-4497-9b94-578e3230d1af", "target": "bc97b32a-bbb9-46fe-b80b-ae7726002810", "input": "ccb2c424-0330-477d-825e-50704802c180"}, {"source": "bc97b32a-bbb9-46fe-b80b-ae7726002810", "output": "aeeaac3d-dd7a-4c61-a1e0-63b31917c6c9", "target": "0488188a-f10d-40c3-9fb8-a7e19a86895f", "input": "e90fb252-7b6d-4ab4-aba7-9ae135ae55c5"}, {"source": "badaa4da-d1c1-419d-a2b5-2d5719c199e0", "output": "772dd7bb-ec09-4573-b137-6595eaee1067", "target": "9583c6fa-4848-42b9-ac35-b68209275917", "input": "63ceb697-3526-4448-b93b-a41f85cbf4c7"}, {"source": "52d90a12-5ccf-4e8d-9251-5aadd578b361", "output": "312f90c4-4120-4cc4-b63d-5691e6053397", "target": "e0e211f3-03e9-4920-a94b-ac0775284387", "input": "1b036b0e-1cbc-421f-9629-b816659670f5"}, {"source": "7c7362ae-32b0-4af1-a979-9c2f7dbfb1f6", "output": "e9b3094e-b6e7-4f2d-b583-a5aa376a4da8", "target": "7eac02eb-1e29-4264-bc93-7ef0006b8dda", "input": "8fc9a071-d5fc-498f-b434-c8524409f768"}, {"source": "0488188a-f10d-40c3-9fb8-a7e19a86895f", "output": "2a5f01e9-f900-409e-b3ca-6b62119f178f", "target": "b2084209-dbcb-4b89-8dcb-359e526ee00b", "input": "8ec050ae-7639-46b3-b980-bef033b3926d"}], "bendpoints": "[{\"source\": \"5ab595e3-68ac-4c62-bac1-ac6aae77a97b\", \"target\": \"47fdfb60-8ff3-404f-8d92-6fe3830dbd7e\", \"coordinates\": \"310:1465\"}, {\"source\": \"2fb56e1e-ab33-4739-8c27-f2a8c9533a70\", \"target\": \"726a3708-13f4-4bc9-ac6b-7e76194462c9\", \"coordinates\": \"640:530\"}, {\"source\": \"badaa4da-d1c1-419d-a2b5-2d5719c199e0\", \"target\": \"8d8d8bcf-b822-40d1-b58a-53c7647c0582\", \"coordinates\": \"585:310\"}, {\"source\": \"07053abc-0a2f-4400-819e-528741a07d6b\", \"target\": \"68e2f0d1-b7c5-4bc9-9cee-66b672b00a6d\", \"coordinates\": \"940:810\"}, {\"source\": \"726a3708-13f4-4bc9-ac6b-7e76194462c9\", \"target\": \"4b0f55d3-4b9c-4583-971c-0eaa58a16159\", \"coordinates\": \"885:625\"}, {\"source\": \"15044b1a-64c2-48fd-a7d8-9513e9d764ab\", \"target\": \"0962b9fd-f5ed-4a4a-b6b4-38f85891922f\", \"coordinates\": \"1240:1090\"}, {\"source\": \"68e2f0d1-b7c5-4bc9-9cee-66b672b00a6d\", \"target\": \"340fcb6a-bd1e-4b67-be3f-3b9f2b0ee3f1\", \"coordinates\": \"1185:905\"}, {\"source\": \"b64d9ffc-0ae4-409d-aa0f-24d9163ad1da\", \"target\": \"5ab595e3-68ac-4c62-bac1-ac6aae77a97b\", \"coordinates\": \"1540:1370\"}, {\"source\": \"726a3708-13f4-4bc9-ac6b-7e76194462c9\", \"target\": \"d2bb1a94-2c09-4a70-a855-c6d7ef469006\", \"coordinates\": \"1485:625\"}, {\"source\": \"7ea0084d-edb7-41ac-bd97-26afa9ccbedc\", \"target\": \"7c7362ae-32b0-4af1-a979-9c2f7dbfb1f6\", \"coordinates\": \"1840:1650\"}, {\"source\": \"badaa4da-d1c1-419d-a2b5-2d5719c199e0\", \"target\": \"b0626999-301a-40ed-aa8e-b96d761d07b7\", \"coordinates\": \"1785:310\"}, {\"source\": \"bc97b32a-bbb9-46fe-b80b-ae7726002810\", \"target\": \"0488188a-f10d-40c3-9fb8-a7e19a86895f\", \"coordinates\": \"2140:1930\"}, {\"source\": \"badaa4da-d1c1-419d-a2b5-2d5719c199e0\", \"target\": \"9583c6fa-4848-42b9-ac35-b68209275917\", \"coordinates\": \"2085:310\"}, {\"source\": \"52d90a12-5ccf-4e8d-9251-5aadd578b361\", \"target\": \"e0e211f3-03e9-4920-a94b-ac0775284387\", \"coordinates\": \"310:120\"}]", "labels": "[{\"identifier\": \"b032c55b-2fbd-471a-9a3f-1a88226cd093\", \"headerText\": \"\", \"text\": \"Converger Loop\", \"location\": \"200:200\", \"size\": \"1420:1340\", \"alpha\": \"180\", \"colorHeader\": \"0:0:0\", \"colorText\": \"0:0:0\", \"colorBackground\": \"0:255:255\", \"labelPosition\": \"TOPRIGHT\", \"textAlignmentType\": \"LEFT\", \"headerAlignmentType\": \"CENTER\", \"border\": \"false\", \"headerSize\": \"14\", \"textSize\": \"10\", \"zIndex\": 0}]"}